---
#  Copyright (c) 2023 SAP SE
#  Copyright (c) 2023 T-Systems International GmbH
#  Copyright (c) 2022, 2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#
#
# Conforming Agent Deployment Values
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Specifies how many replicas of a deployed pod shall be created during the deployment
# Note: If horizontal pod autoscaling is enabled this setting has no effect
replicaCount: 1

image:
  # -- target registry
  registry: docker.io/
  # -- Which derivate of agent to use
  repository: tractusx/aas-bridge
  # -- Overrides the image tag whose default is the chart appVersion
  tag: ""
  # -- Overrides the image digest
  digest: ""
  ## Specify an imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Example:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
  ## Set to true if you would like to see extra information on logs
  ##

# -- Overrides the charts name
nameOverride: ""

# -- Overrides the releases full name
fullnameOverride: ""

# -- Additional custom Labels to add
customLabels: {}

serviceAccount:
  # -- Specifies whether a [service account](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) should be created per release
  create: true
  # -- [Annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) to add to the service account
  annotations: {}
  # -- The name of the service account to use. If not set and create is true, a name is generated using the release's fullname template
  name: ""

# -- Whether to [automount kubernetes API credentials](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server) into the pod
automountServiceAccountToken: false

# -- [Annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) added to deployed [pods](https://kubernetes.io/docs/concepts/workloads/pods/)
podAnnotations: {}
# Uncomment this and remove parenthesis if you want to enable apparmor
# container.apparmor.security.beta.kubernetes.io/aas-bridge: runtime/default

# The [pod security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) defines privilege and access control settings for a Pod within the deployment
podSecurityContext:
  seccompProfile:
    # -- Restrict a Container's Syscalls with seccomp
    type: RuntimeDefault
  # -- Runs all processes within a pod with a special uid
  runAsUser: 10100
  # -- Processes within a pod will belong to this guid
  runAsGroup: 30000
  # -- The owner for volumes and any files created within volumes will belong to this guid
  fsGroup: 30000

# The [container security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container) defines privilege and access control settings for a Container within a pod
securityContext:
  capabilities:
    # -- Specifies which capabilities to drop to reduce syscall attack surface
    drop:
      - ALL
    # -- Specifies which capabilities to add to issue specialized syscalls
    add:
      - NET_BIND_SERVICE
  # -- Whether the root filesystem is mounted in read-only mode
  readOnlyRootFilesystem: true
  # -- Controls [Privilege Escalation](https://kubernetes.io/docs/concepts/security/pod-security-policy/#privilege-escalation) enabling setuid binaries changing the effective user ID
  allowPrivilegeEscalation: false
  # -- Requires the container to run without root privileges
  runAsNonRoot: true
  # -- The container's process will run with the specified uid
  runAsUser: 10100
  # -- Processes within a pod will belong to this guid
  runAsGroup: 30000

livenessProbe:
  # -- Whether to enable kubernetes [liveness-probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  # -- Minimum consecutive failures for the probe to be considered failed after having succeeded
  failureThreshold: 3
  # -- Number of seconds each period lasts.
  periodSeconds: 60
  # -- number of seconds until a timeout is assumed
  timeoutSeconds: 5

readinessProbe:
  # -- Whether to enable kubernetes readiness-probes
  enabled: true
  # -- Minimum consecutive failures for the probe to be considered failed after having succeeded
  failureThreshold: 3
  # -- Number of seconds each period lasts.
  periodSeconds: 300
  # -- number of seconds until a timeout is assumed
  timeoutSeconds: 5

startupProbe:
  # -- Whether to enable kubernetes startup-probes
  enabled: true
  # -- Minimum consecutive failures for the probe to be considered failed after having succeeded
  failureThreshold: 4
  # -- Number of seconds after the container has started before liveness probes are initiated.
  initialDelaySeconds: 90
  # -- Number of seconds each period lasts.
  periodSeconds: 30
  # -- number of seconds until a timeout is assumed
  timeoutSeconds: 5

## Settings of the aas server
aas:
  ## Persistence settings
  persistence:
    # -- The default sparql server is embedded
    sparql: http://sparql.local
    auth:
      # -- The key that should be used in the authorization header when talking to the sparql server
      key: "Basic "
    # -- whether the results of the queries should be logged
    log: false
  endpoints:
    ## Default api exposing health checks etc
    default:
      # -- The network port, which the "default" api is going to be exposed by the container, pod and service
      port: "8443"
      # -- An auth object for default security
      auth: {}
      # -- The path mapping the "default" api is going to be exposed by
      path: ""
      # -- An optional regex path match (whose match groups could be used in an nginx-annotation of the ingress)
      regex: ""

service:
  # -- [Service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) to expose the running application on a set of Pods as a network service.
  type: ClusterIP

## Ingress declaration to expose the network service.
ingresses:
  ## Agent-Plane Facing Ingress
  - enabled: false
    # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
    hostname: "aas-bridge.local"
    # -- Additional ingress annotations to add, for example when implementing more complex routings you may set { nginx.ingress.kubernetes.io/rewrite-target: /$1, nginx.ingress.kubernetes.io/use-regex: "true" }
    annotations:
      # Example if you want more complex routings in interplay with the endpoints regex property
      # nginx.ingress.kubernetes.io/rewrite-target: /$1
      # nginx.ingress.kubernetes.io/use-regex: "true"
      # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    # -- Optional prefix that will be prepended to the paths of the endpoints
    prefix: ""
    # -- Agent endpoints exposed by this ingress resource
    endpoints:
      - default
    # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
    className: ""
    # -- TLS [tls class](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) applied to the ingress resource
    tls:
      # -- Enables TLS on the ingress resource
      enabled: false
      # -- If present overwrites the default secret name
      secretName: ""
    ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
    certManager:
      # -- If preset enables certificate generation via cert-manager namespace scoped issuer
      issuer: ""
      # -- If preset enables certificate generation via cert-manager cluster-wide issuer
      clusterIssuer: ""

# -- [Resource management](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) applied to the deployed pod
# We recommend 40% of a cpu and unfortunately 1Gi to initialise the library
resources:
  requests:
    cpu: 400m
    memory: 1Gi
  limits:
    cpu: 400m
    memory: 1Gi

autoscaling:
  # -- Enables [horizontal pod autoscaling](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)
  enabled: false
  # -- Minimal replicas if resource consumption falls below resource threshholds
  minReplicas: 1
  # -- Maximum replicas if resource consumption exceeds resource threshholds
  maxReplicas: 100
  # -- targetAverageUtilization of cpu provided to a pod
  targetCPUUtilizationPercentage: 80
  # -- targetAverageUtilization of memory provided to a pod
  targetMemoryUtilizationPercentage: 80

# -- [Node-Selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) to constrain the Pod to nodes with specific labels.
nodeSelector: {}

# -- [Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) are applied to Pods to schedule onto nodes with matching taints.
tolerations: []

# -- [Affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity) constrains which nodes the Pod can be scheduled on based on node labels.
affinity: {}

# -- Container environment variables e.g. for configuring [JAVA_TOOL_OPTIONS](https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/envvars002.html)
# Ex.:
#       JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040"
env: {}

# -- [Kubernetes Secret Resource](https://kubernetes.io/docs/concepts/configuration/secret/) name to load environment variables from
envSecretName:

# -- configuration of the [Open Telemetry Agent](https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/) to collect and expose metrics
opentelemetry: |-
 otel.javaagent.enabled=false
 otel.javaagent.debug=false

# -- Define the mapping/domains. Each domain consists of a set of mapping files ()
domains:
  traceability:
    aas:
      mapping.xslt: |-
        <?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0"
                        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:sparql="http://www.w3.org/2005/sparql-results#"
                        xmlns:semanticid="https://w3id.org/catenax/ontology/aas#"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <xsl:variable name="domain"  select="'traceability'"/>
            <xsl:variable name="semanticid"  select="'https://w3id.org/catenax/ontology/aas#'"/>
            <xsl:output method="xml" />
            <xsl:template name="genAssetId">
              <xsl:value-of select="$domain"/>/<xsl:value-of select="./sparql:binding[@name='id']/sparql:uri"/>
            </xsl:template>
            <xsl:template name="root" match="/">
                <aas:environment xmlns:aas="https://admin-shell.io/aas/3/0"
                                xsi:schemaLocation="">
                    <aas:assetAdministrationShells>
                        <xsl:for-each select="//sparql:result">
                        <aas:assetAdministrationShell>
                            <aas:idShort><xsl:call-template name="genAssetId"/></aas:idShort>
                            <aas:id><xsl:call-template name="genAssetId"/></aas:id>
                            <aas:assetInformation>
                                <aas:assetKind>Instance</aas:assetKind>
                                <aas:globalAssetId><xsl:call-template name="genAssetId"/></aas:globalAssetId>
                            </aas:assetInformation>
                            <aas:description>
                                <aas:langStringTextType>
                                    <aas:language>en</aas:language>
                                    <aas:text><xsl:value-of select="./sparql:binding[@name='name']/sparql:literal"/></aas:text>
                                </aas:langStringTextType>
                            </aas:description>
                            <aas:submodels>
                                <xsl:for-each select="./sparql:binding[@name != 'id' and @name != 'name']">
                                <aas:reference>
                                    <aas:type>ExternalReference</aas:type>
                                    <aas:keys>
                                        <aas:key>
                                            <aas:type>Submodel</aas:type>
                                            <aas:value><xsl:value-of select="$domain"/>/<xsl:value-of select="./sparql:uri"/>/<xsl:value-of select="../sparql:binding[@name = 'id']/sparql:uri"/></aas:value>
                                        </aas:key>
                                    </aas:keys>
                                </aas:reference>
                                </xsl:for-each>
                            </aas:submodels>
                        </aas:assetAdministrationShell>
                        </xsl:for-each>
                    </aas:assetAdministrationShells>
                </aas:environment>
            </xsl:template>
        </xsl:stylesheet>
      select-all.rq: |-
        PREFIX cx-common: <https://w3id.org/catenax/ontology/common#>
        PREFIX cx-core: <https://w3id.org/catenax/ontology/core#>
        PREFIX cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#>
        PREFIX cx-bom: <https://w3id.org/catenax/ontology/bill-of-material#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

        #
        # A request for obtaining all asset administration shells for serialized parts
        #

        SELECT DISTINCT ?id ?name ?pasp ?psasp ?hasRecycling ?slbomap ?slusap ?mfr WHERE {

            # all parts are twins
            ?id rdf:type cx-vehicle:Part;
                cx-core:name ?name.

            # Part
            OPTIONAL{
                ?id cx-core:id ?manufacturerPartId.
                BIND(<urn:bamm:io.catenax.part_as_planned:1.0.1#PartAsPlanned> as ?pasp).
            }
        }
        ORDER BY DESC(?id)
      select-some.rq: |-
        PREFIX cx-common: <https://w3id.org/catenax/ontology/common#>
        PREFIX cx-core: <https://w3id.org/catenax/ontology/core#>
        PREFIX cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#>
        PREFIX cx-bom: <https://w3id.org/catenax/ontology/bill-of-material#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

        #
        # A request for obtaining specific asset administration shells for serialized parts
        #

        SELECT DISTINCT ?id ?name ?pasp ?psasp ?hasRecycling ?slbomap ?slusap ?mfr WHERE {

            VALUES(?id) {
                (%s)
            }

            # all parts are twins
            ?id rdf:type cx-vehicle:Part;
                cx-core:name ?name.

            # Part
            OPTIONAL{
                ?id cx-core:id ?manufacturerPartId.
                BIND(<urn:bamm:io.catenax.part_as_planned:1.0.1#PartAsPlanned> as ?pasp).
            }
        }
        ORDER BY DESC(?id)
    partAsPlanned:
      mapping.xslt: |-
        <?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0"
                        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:sparql="http://www.w3.org/2005/sparql-results#"
                        xmlns:semanticid="urn:bamm:io.catenax.part_as_planned:1.0.1#PartAsPlanned"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xmlns:xs="http://www.w3.org/2001/XMLSchema">
            <xsl:variable name="domain" select="'traceability'"/>
            <xsl:variable name="semanticid"  select="'urn:bamm:io.catenax.part_as_planned:1.0.1#PartAsPlanned'"/>
            <xsl:output method="xml" />
            <xsl:template name="genAssetId">
                <xsl:value-of select="$domain"/>/<xsl:value-of select="./sparql:binding[@name='catenaXId']/sparql:uri"/>
            </xsl:template>
            <xsl:template name="genSubmodelId">
                <xsl:value-of select="$domain"/>/<xsl:value-of select="$semanticid"/>/<xsl:value-of select="./sparql:binding[@name='catenaXId']/sparql:uri"/>
            </xsl:template>
            <xsl:key name="catenax-id" match="//sparql:result" use="sparql:binding[@name='catenaXId']/sparql:uri" />
            <xsl:template name="root" match="/">
                <aas:environment xmlns:aas="https://admin-shell.io/aas/3/0"
                                xsi:schemaLocation="">
                    <aas:assetAdministrationShells>
                        <xsl:for-each select="//sparql:result[count(. | key('catenax-id', ./sparql:binding[@name='catenaXId']/sparql:uri)[1]) = 1]">
                            <aas:assetAdministrationShell>
                                <aas:idShort><xsl:call-template name="genAssetId"/></aas:idShort>
                                <aas:id><xsl:call-template name="genAssetId"/></aas:id>
                                <aas:assetInformation>
                                    <aas:assetKind>Instance</aas:assetKind>
                                    <aas:globalAssetId><xsl:call-template name="genAssetId"/></aas:globalAssetId>
                                </aas:assetInformation>
                                <aas:submodels>
                                    <xsl:for-each select="key('catenax-id',./sparql:binding[@name='catenaXId']/sparql:uri)">
                                    <aas:reference>
                                        <aas:type>ExternalReference</aas:type>
                                        <aas:keys>
                                            <aas:key>
                                                <aas:type>Submodel</aas:type>
                                                <aas:value><xsl:call-template name="genSubmodelId"/></aas:value>
                                            </aas:key>
                                        </aas:keys>
                                    </aas:reference>
                                    </xsl:for-each>
                                </aas:submodels>
                            </aas:assetAdministrationShell>
                        </xsl:for-each>
                    </aas:assetAdministrationShells>
                    <aas:submodels>
                        <xsl:for-each select="//sparql:result">
                            <aas:submodel>
                                <aas:kind>Instance</aas:kind>
                                <aas:semanticId>
                                    <aas:type>ModelReference</aas:type>
                                    <aas:keys>
                                        <aas:key>
                                            <aas:type>ConceptDescription</aas:type>
                                            <aas:value><xsl:value-of select="$semanticid"/></aas:value>
                                        </aas:key>
                                    </aas:keys>
                                </aas:semanticId>
                                <aas:id><xsl:call-template name="genSubmodelId"/></aas:id>
                                <aas:idShort>PartAsPlanned</aas:idShort>
                                <aas:description>
                                    <aas:langStringTextType>
                                        <aas:language>en</aas:language>
                                        <aas:text>A Part AsPlanned represents an item in the Catena-X Bill of Material (BOM) in As-Planned lifecycle status. </aas:text>
                                    </aas:langStringTextType>
                                </aas:description>
                                <aas:submodelElements>
                                    <aas:property>
                                        <aas:category>Key</aas:category>
                                        <aas:idShort>catenaXId</aas:idShort>
                                        <aas:description>
                                            <aas:langStringTextType>
                                                <aas:language>en</aas:language>
                                                <aas:text>The fully anonymous Catena-X ID of the serialized part, valid for the Catena-X dataspace.</aas:text>
                                            </aas:langStringTextType>
                                        </aas:description>
                                        <aas:displayName>
                                            <aas:langStringNameType>
                                                <aas:language>en</aas:language>
                                                <aas:text>Catena-X Identifier</aas:text>
                                            </aas:langStringNameType>
                                        </aas:displayName>
                                        <aas:semanticId>
                                            <aas:type>ModelReference</aas:type>
                                            <aas:keys>
                                                <aas:key>
                                                    <aas:type>ConceptDescription</aas:type>
                                                    <aas:value>urn:bamm:io.catenax.part_as_planned:1.0.1#catenaXId</aas:value>
                                                </aas:key>
                                            </aas:keys>
                                        </aas:semanticId>
                                        <aas:valueType>xs:string</aas:valueType>
                                        <aas:value><xsl:value-of select="./sparql:binding[@name='catenaXId']/sparql:uri"/></aas:value>
                                    </aas:property>
                                    <aas:submodelElementCollection>
                                        <aas:idShort>partTypeInformation</aas:idShort>
                                        <aas:description>
                                            <aas:langStringTextType>
                                                <aas:language>en</aas:language>
                                                <aas:text>Encapsulation for data related to the part type</aas:text>
                                            </aas:langStringTextType>
                                        </aas:description>
                                        <aas:displayName>
                                            <aas:langStringNameType>
                                                <aas:language>en</aas:language>
                                                <aas:text>Part Type Information Entity</aas:text>
                                            </aas:langStringNameType>
                                        </aas:displayName>
                                        <aas:value>
                                            <aas:property>
                                                <aas:category>Key</aas:category>
                                                <aas:idShort>manufacturerPartId</aas:idShort>
                                                <aas:description>
                                                    <aas:langStringTextType>
                                                        <aas:language>en</aas:language>
                                                        <aas:text>Part ID as assigned by the manufacturer of the part. The Part ID identifies the part (as designed) in the manufacturer`s dataspace. The Part ID does not reference a specific instance of a part and thus should not be confused with the serial number.</aas:text>
                                                    </aas:langStringTextType>
                                                </aas:description>
                                                <aas:displayName>
                                                    <aas:langStringNameType>
                                                        <aas:language>en</aas:language>
                                                        <aas:text>Manufacturer Part ID</aas:text>
                                                    </aas:langStringNameType>
                                                </aas:displayName>
                                                <aas:semanticId>
                                                    <aas:type>ModelReference</aas:type>
                                                    <aas:keys>
                                                        <aas:key>
                                                            <aas:type>ConceptDescription</aas:type>
                                                            <aas:value>urn:bamm:io.catenax.part_as_planned:1.0.1#manufacturerPartId</aas:value>
                                                        </aas:key>
                                                    </aas:keys>
                                                </aas:semanticId>
                                                <aas:valueType>xs:string</aas:valueType>
                                                <aas:value><xsl:value-of select="./sparql:binding[@name='manufacturerPartId']/sparql:literal"/></aas:value>
                                            </aas:property>
                                            <aas:property>
                                                <aas:category>Value</aas:category>
                                                <aas:idShort>nameAtManufacturer</aas:idShort>
                                                <aas:description>
                                                    <aas:langStringTextType>
                                                        <aas:language>en</aas:language>
                                                        <aas:text>Name of the part as assigned by the manufacturer.</aas:text>
                                                    </aas:langStringTextType>
                                                </aas:description>
                                                <aas:displayName>
                                                    <aas:langStringNameType>
                                                        <aas:language>en</aas:language>
                                                        <aas:text>Name at Manufacturer</aas:text>
                                                    </aas:langStringNameType>
                                                </aas:displayName>
                                                <aas:semanticId>
                                                    <aas:type>ModelReference</aas:type>
                                                    <aas:keys>
                                                        <aas:key>
                                                            <aas:type>ConceptDescription</aas:type>
                                                            <aas:value>urn:bamm:io.catenax.part_as_planned:1.0.1#nameAtManufacturer</aas:value>
                                                        </aas:key>
                                                    </aas:keys>
                                                </aas:semanticId>
                                                <aas:valueType>xs:string</aas:valueType>
                                                <aas:value><xsl:value-of select="./sparql:binding[@name='nameAtManufacturer']/sparql:literal"/></aas:value>
                                            </aas:property>
                                            <aas:property>
                                                <aas:category>Enum</aas:category>
                                                <aas:idShort>classification</aas:idShort>
                                                <aas:description>
                                                    <aas:langStringTextType>
                                                        <aas:language>en</aas:language>
                                                        <aas:text>Classification of the part as assigned by the manufacturer.</aas:text>
                                                    </aas:langStringTextType>
                                                </aas:description>
                                                <aas:displayName>
                                                    <aas:langStringNameType>
                                                        <aas:language>en</aas:language>
                                                        <aas:text>Product Classification</aas:text>
                                                    </aas:langStringNameType>
                                                </aas:displayName>
                                                <aas:semanticId>
                                                    <aas:type>ModelReference</aas:type>
                                                    <aas:keys>
                                                        <aas:key>
                                                            <aas:type>ConceptDescription</aas:type>
                                                            <aas:value>urn:bamm:io.catenax.part_as_planned:1.0.1#classification</aas:value>
                                                        </aas:key>
                                                    </aas:keys>
                                                </aas:semanticId>
                                                <aas:valueType>xs:string</aas:valueType>
                                                <aas:value><xsl:value-of select="./sparql:binding[@name='classification']/sparql:literal"/></aas:value>
                                            </aas:property>
                                        </aas:value>
                                    </aas:submodelElementCollection>
                                    <aas:submodelElementCollection>
                                        <aas:idShort>validityPeriod</aas:idShort>
                                        <aas:description>
                                            <aas:langStringTextType>
                                                <aas:language>en</aas:language>
                                                <aas:text>Temporal validity period of the part.</aas:text>
                                            </aas:langStringTextType>
                                        </aas:description>
                                        <aas:displayName>
                                            <aas:langStringNameType>
                                                <aas:language>en</aas:language>
                                                <aas:text>validityPeriod</aas:text>
                                            </aas:langStringNameType>
                                        </aas:displayName>
                                        <aas:value>
                                            <aas:property>
                                                <aas:category>Time</aas:category>
                                                <aas:idShort>validFrom</aas:idShort>
                                                <aas:description>
                                                    <aas:langStringTextType>
                                                        <aas:language>en</aas:language>
                                                        <aas:text>Start date of validity period.</aas:text>
                                                    </aas:langStringTextType>
                                                </aas:description>
                                                <aas:displayName>
                                                    <aas:langStringNameType>
                                                        <aas:language>en</aas:language>
                                                        <aas:text>Valid From</aas:text>
                                                    </aas:langStringNameType>
                                                </aas:displayName>
                                                <aas:semanticId>
                                                    <aas:type>ModelReference</aas:type>
                                                    <aas:keys>
                                                        <aas:key>
                                                            <aas:type>ConceptDescription</aas:type>
                                                            <aas:value>urn:bamm:io.catenax.part_as_planned:1.0.1#validFrom</aas:value>
                                                        </aas:key>
                                                    </aas:keys>
                                                </aas:semanticId>
                                                <aas:valueType>xs:dateTime</aas:valueType>
                                                <aas:value><xsl:value-of select="./sparql:binding[@name='validFrom']/sparql:literal"/></aas:value>
                                            </aas:property>
                                            <aas:property>
                                                <aas:category>Time</aas:category>
                                                <aas:idShort>validFrom</aas:idShort>
                                                <aas:description>
                                                    <aas:langStringTextType>
                                                        <aas:language>en</aas:language>
                                                        <aas:text>End date of validity period.</aas:text>
                                                    </aas:langStringTextType>
                                                </aas:description>
                                                <aas:displayName>
                                                    <aas:langStringNameType>
                                                        <aas:language>en</aas:language>
                                                        <aas:text>Valid To</aas:text>
                                                    </aas:langStringNameType>
                                                </aas:displayName>
                                                <aas:semanticId>
                                                    <aas:type>ModelReference</aas:type>
                                                    <aas:keys>
                                                        <aas:key>
                                                            <aas:type>ConceptDescription</aas:type>
                                                            <aas:value>urn:bamm:io.catenax.part_as_planned:1.0.1#validTo</aas:value>
                                                        </aas:key>
                                                    </aas:keys>
                                                </aas:semanticId>
                                                <aas:valueType>xs:dateTime</aas:valueType>
                                                <aas:value><xsl:value-of select="./sparql:binding[@name='validTo']/sparql:literal"/></aas:value>
                                            </aas:property>
                                        </aas:value>
                                    </aas:submodelElementCollection>
                                </aas:submodelElements>
                            </aas:submodel>
                        </xsl:for-each>
                    </aas:submodels>
                    <aas:conceptDescriptions>
                    </aas:conceptDescriptions>
                </aas:environment>
            </xsl:template>
        </xsl:stylesheet>
      select-all.rq: |-
        PREFIX cx-common: <https://w3id.org/catenax/ontology/common#>
        PREFIX cx-core: <https://w3id.org/catenax/ontology/core#>
        PREFIX cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

        # Select all part information

        SELECT ?catenaXId ?validFrom ?validTo ?classification ?manufacturerPartId ?nameAtManufacturer
        WHERE {
            ?catenaXId rdf:type cx-vehicle:Part;
                cx-core:id ?manufacturerPartId;
                cx-core:name ?nameAtManufacturer;
                cx-vehicle:productionPeriodStart ?validFrom;
                cx-vehicle:productionPeriodEnd ?validTo.
            BIND('product' AS ?classification).
        }
        ORDER BY DESC(?catenaXId)
      select-some.rq: |-
        PREFIX cx-common: <https://w3id.org/catenax/ontology/common#>
        PREFIX cx-core: <https://w3id.org/catenax/ontology/core#>
        PREFIX cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

        # Select some part information

        SELECT ?catenaXId ?validFrom ?validTo ?classification ?manufacturerPartId ?nameAtManufacturer
        WHERE {

            VALUES(?catenaXId) {
                (%s)
            }

            ?catenaXId rdf:type cx-vehicle:Part;
                cx-core:id ?manufacturerPartId;
                cx-core:name ?nameAtManufacturer;
                cx-vehicle:productionPeriodStart ?validFrom;
                cx-vehicle:productionPeriodEnd ?validTo.

            BIND('product' AS ?classification).
        }
        ORDER BY DESC(?catenaXId)
